version: '3.8'

services:
  traefik:
    image: traefik:v3.2
    container_name: traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.filename=/traefik-tls.yml"
      - "--providers.file.watch=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--ping=true"
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
      - "${TRAEFIK_DASHBOARD_PORT:-8083}:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./certs:/certs:ro
      - ./traefik-tls.yml:/traefik-tls.yml:ro
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    restart: unless-stopped

  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: marlene-web
    labels:
      - "traefik.enable=true"
      # HTTP router
      - "traefik.http.routers.web-http.rule=Host(`${DOMAIN:-localhost}`) || Host(`www.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.web-http.entrypoints=web"
      - "traefik.http.routers.web-http.priority=1"
      - "traefik.http.routers.web-http.middlewares=strip-user-header,auth-middleware"
      # HTTPS router
      - "traefik.http.routers.web-https.rule=Host(`${DOMAIN:-localhost}`) || Host(`www.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.web-https.entrypoints=websecure"
      - "traefik.http.routers.web-https.priority=1"
      - "traefik.http.routers.web-https.middlewares=strip-user-header,auth-middleware"
      - "traefik.http.routers.web-https.tls=true"
      # Strip x-user header from client requests (security)
      - "traefik.http.middlewares.strip-user-header.headers.customrequestheaders.x-user="
      # Service
      - "traefik.http.services.web.loadbalancer.server.port=8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  auth-middleware:
    build:
      context: ./auth-middleware
      dockerfile: Dockerfile
    container_name: auth-middleware
    environment:
      - COOKIE_SECRET=${COOKIE_SECRET:?COOKIE_SECRET environment variable is required}
      - COOKIE_NAME=${COOKIE_NAME:-auth}
      - NODE_ENV=development
      - RESEND_API_KEY=${RESEND_API_KEY:?RESEND_API_KEY environment variable is required}
      - RESEND_FROM=${RESEND_FROM:-noreply@example.com}
      - DOMAIN=${DOMAIN:-localhost}
      - ALLOWED_SUBDOMAINS=${ALLOWED_SUBDOMAINS:-}
      - TOKEN_STORAGE_PATH=/data
    volumes:
      - auth-tokens:/data
    stop_grace_period: 30s
    labels:
      - "traefik.enable=true"
      # Forward Auth middleware configuration
      - "traefik.http.middlewares.auth-middleware.forwardauth.address=http://auth-middleware:3000/verify"
      - "traefik.http.middlewares.auth-middleware.forwardauth.authRequestHeaders=Cookie"
      - "traefik.http.middlewares.auth-middleware.forwardauth.authResponseHeaders=x-user"
      - "traefik.http.middlewares.auth-middleware.forwardauth.addAuthCookiesToResponse=${COOKIE_NAME:-auth}"
      # Direct routes for auth subdomain - HTTPS only (certificates configured)
      - "traefik.http.routers.auth-https.rule=Host(`auth.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.auth-https.entrypoints=websecure"
      - "traefik.http.routers.auth-https.tls=true"
      - "traefik.http.routers.auth-https.service=auth-middleware"
      # Service
      - "traefik.http.services.auth-middleware.loadbalancer.server.port=3000"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped

volumes:
  auth-tokens:
    driver: local
